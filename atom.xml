<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Tom Preston-Werner</title>
 <link href="http://www.ryanjm.com.com/atom.xml" rel="self"/>
 <link href="http://www.ryanjm.com/"/>
 <updated>2012-11-20T13:09:32-07:00</updated>
 <id>http://www.ryanjm.com/</id>
 <author>
   <name>Ryan Mathews</name>
   <email>ryan@ryanjm.com</email>
 </author>

 
 <entry>
   <title>Vim Registers</title>
   <link href="http://www.ryanjm.com/vim/2012/11/20/vim-registers/"/>
   <updated>2012-11-20T00:00:00-07:00</updated>
   <id>http://www.ryanjm.com/vim/2012/11/20/vim-registers</id>
   <content type="html">&lt;p&gt;One of the big time savers I loved in TextMate was the ability to copy and paste multiple things at a time. In TextMate, if you will &amp;#8984;+C multiple items of text, you can paste them out doing &amp;#8984;+V, &amp;#8984;+&amp;#x21E7;+V, and then repeating &amp;#8984;+&amp;#x21E7;+V till you are done.&lt;/p&gt;

&lt;p&gt;In Vim, it isn&amp;#39;t that easy. Vim has registeres which are places you can place text to use later. To see your current list of registers use &lt;code&gt;:reg&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The docs say there are 9 types of registers:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text codehilite&quot;&gt;1. The unnamed register &amp;quot;&amp;quot;
2. 10 numbered registers &amp;quot;0 to &amp;quot;9
3. The small delete register &amp;quot;-
4. 26 named registers &amp;quot;a to &amp;quot;z or &amp;quot;A to &amp;quot;Z
5. four read-only registers &amp;quot;:, &amp;quot;., &amp;quot;% and &amp;quot;#
6. the expression register &amp;quot;=
7. The selection and drop registers &amp;quot;*, &amp;quot;+ and &amp;quot;~ 
8. The black hole register &amp;quot;_
9. Last search pattern register &amp;quot;/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you want to delete a line and not lose the last thing you copied / deleted, you have to delete it into the black hole register &lt;code&gt;&amp;quot;_dd&lt;/code&gt;. One convient thing is that for every delete or change, vim automatically puts those into the 1-9 register, shifting them up one register each time.&lt;/p&gt;

&lt;p&gt;For example, if you had the following lines:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text codehilite&quot;&gt;Line 1
Line 2
Line 3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And you go down each line and delete it with &lt;code&gt;dd&lt;/code&gt;, then you could paste them all out with the following commands:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text codehilite&quot;&gt;&amp;quot;1p
.
.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That is, you paste from the first register, and then you repeat with &lt;code&gt;.&lt;/code&gt;, which normally repeats the last command, in thise can it will automatically walk up the other registers for you. Unfortinetly, yank doesn&amp;#39;t work this way.&lt;/p&gt;

&lt;p&gt;For yank you can put the text into a register by doing &lt;code&gt;&amp;quot;xy&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; is the register you want to use. This is the only way to yank multiple lines or sections of code and be able to reuse them later.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Slowly Clearing Out Instapaper</title>
   <link href="http://www.ryanjm.com/weekly-roundup/2012/11/17/slowly-clearing-out-instapaper/"/>
   <updated>2012-11-17T00:00:00-07:00</updated>
   <id>http://www.ryanjm.com/weekly-roundup/2012/11/17/slowly-clearing-out-instapaper</id>
   <content type="html">&lt;p&gt;After realizing I had 400 unread articles in Instapaper (dating all the way back to 2009), I&amp;#39;ve declared bankruptcy by moving them into their own folder. I&amp;#39;ll go through them slowly over the next year, and every week or two I&amp;#39;ll post some of the best articles that I&amp;#39;ve come across. Here is this week&amp;#39;s list.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.minming.net/post/35553963889/a-billion-dollar-software-tech-company-is-founded-every&quot;&gt;A billion dollar software tech company is founded every 3 months *in U.S.&lt;/a&gt; - interesting list of some of the billion dollar companies that have come out in the past couple years.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.shopify.com/blog/6553665-12-must-watch-ted-talks-for-entrepreneurs&quot;&gt;12 Ted talks for Entrepreneurs&lt;/a&gt; - Some food for thought.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/549/the-definitive-guide-to-forms-based-website-authentication&quot;&gt;SO&amp;#39;s definitive guide to forms based website authentication&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jquery14.com/day-01&quot;&gt;14 days with jQuery&lt;/a&gt; - old (2010), but contains some great videos about jQuery / javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://css-tricks.com/why-ems/&quot;&gt;Why Ems?&lt;/a&gt; - I&amp;#39;ve been wanting to play around with Ems for awhile and I think these are some pretty valid points.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jtaby.com/2012/04/23/modern-web-development-part-1.html&quot;&gt;Modern Web Development&lt;/a&gt; - Length article in which Majd goes through almost every aspect of Chrome&amp;#39;s WebKit Inspector. I definitely learned a couple new things.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://httpkit.com/resources/HTTP-from-the-Command-Line/&quot;&gt;9 users for cURL worth knowing&lt;/a&gt; - They go through the common use cases of using cURL. Good read and I&amp;#39;ll be using this as a resource in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ted.com/talks/shawn_achor_the_happy_secret_to_better_work.html&quot;&gt;TED: Shawn Achor: The happy secret to better work&lt;/a&gt; - I&amp;#39;ve watched this a couple times since it came out. Good things to keep in mind.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://techcrunch.com/2012/11/14/foundation-video-ben-horowitz-of-andreessen-horowitz-at-the-google-ventures-founder-ceo-summit/&quot;&gt;Foundation: Ben Horowitz&lt;/a&gt; - I enjoy Kevin&amp;#39;s interviews and this is a good one with Ben Horowitz.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Proficiency With Terminal And Git</title>
   <link href="http://www.ryanjm.com/git/2012/11/13/proficiency-with-terminal-and-git/"/>
   <updated>2012-11-13T00:00:00-07:00</updated>
   <id>http://www.ryanjm.com/git/2012/11/13/proficiency-with-terminal-and-git</id>
   <content type="html">&lt;h2 id=&quot;toc_3&quot;&gt;Terminal&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve recently picked up an amazing Terminal shortcut: &lt;code&gt;^ + R&lt;/code&gt;. Gone are the days of hitting up arrow a bunch of times to get to a previous command. This little shortcut will let you search through your recent commands. Just start typing what you want and it &lt;em&gt;pop&lt;/em&gt; it shows up.&lt;/p&gt;

&lt;h2 id=&quot;toc_4&quot;&gt;Random Git commands&lt;/h2&gt;

&lt;p&gt;I recently watched Zach Holman&amp;#39;s &lt;a href=&quot;http://confreaks.com/videos/1229-aloharuby2012-git-and-github-secrets&quot;&gt;Git and GitHub Secrets&lt;/a&gt; and it had a bunch of great nuggets. It helps to be able to go back through his &lt;a href=&quot;https://speakerdeck.com/holman/git-and-github-secrets&quot;&gt;slides&lt;/a&gt;. Here are some of my favorites.&lt;/p&gt;

&lt;h3 id=&quot;toc_5&quot;&gt;Github&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Add &lt;code&gt;?w=1&lt;/code&gt; to any url to ignore whitespace&lt;/p&gt;

&lt;p&gt;Git.io is github&amp;#39;s url shortner. Check it out &lt;a href=&quot;git.io/nxVVig&quot;&gt;git.io/nxVVig&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gists are repos&lt;/p&gt;

&lt;p&gt;Using hub you can push to multiple remotes: &lt;code&gt;hub push origin,staging&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;?&lt;/code&gt; in github to see all shortcuts&lt;/p&gt;

&lt;p&gt;Search commits by author: &lt;code&gt;?author=holman&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I always forget this URL: &lt;a href=&quot;http://www.emoji-cheat-sheet.com&quot;&gt;Emoji&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;toc_6&quot;&gt;Git&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Commitless Commits: &lt;code&gt;git commit -m &amp;quot;...&amp;quot; --allow-empty&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Staging parts: &lt;code&gt;git add -p&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Search commits: &lt;code&gt;git show :/query&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Go back to previous selection: &lt;code&gt;cd -&lt;/code&gt;, &lt;code&gt;git checkout -&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;See which branches have been merged into current: &lt;code&gt;git branch --merged&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;See which branches have not been merged: &lt;code&gt;git branch --no-merged&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;See which branches contain a commit: &lt;code&gt;git branch --contains 838ad46&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Copy file without switching: &lt;code&gt;git checkout branch -- path/to/file.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit --amend -C HEAD&lt;/code&gt; - alias this!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset --soft HEAD^&lt;/code&gt; undoes the last commit and puts it on staging&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are a &lt;em&gt;bunch&lt;/em&gt; more, so watch the video.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Article Roundup</title>
   <link href="http://www.ryanjm.com/weekly-roundup/2012/06/06/Article-Roundup/"/>
   <updated>2012-06-06T00:00:00-06:00</updated>
   <id>http://www.ryanjm.com/weekly-roundup/2012/06/06/Article-Roundup</id>
   <content type="html">&lt;p&gt;Here are some of the great articles I&amp;#39;ve come across this week.&lt;/p&gt;

&lt;h4 id=&quot;toc_0&quot;&gt;&lt;a href=&quot;http://www.kalzumeus.com/2012/05/31/can-i-get-your-email/&quot;&gt;You Should Probably Send More Email Than You Do&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick McKenzie gets into why it can be valuable to get into a user&amp;#39;s inbox. It is a long article, but has enough nuggets of wisdom to warrant the time.&lt;/p&gt;

&lt;h4 id=&quot;toc_1&quot;&gt;&lt;a href=&quot;http://www.extendslogic.com/business/what-i-learned-from-increasing-my-prices/&quot;&gt;What I Learned From Increasing My Prices&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ruben Gamez talks about using client surveys and phone calls to figure out how to split pricing tiers and how to charge for each.&lt;/p&gt;

&lt;h4 id=&quot;toc_2&quot;&gt;&lt;a href=&quot;http://www.webdesignerdepot.com/2012/06/ui-vs-ux-whats-the-difference/?utm_source=loopinsight.com&amp;amp;utm_medium=referral&amp;amp;utm_campaign=Feed%3A+loopinsight%2FKqJb+%28The+Loop%29&quot;&gt;UI vs UX: what&amp;#39;s the difference?&lt;/a&gt;&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;UI is the saddle, the stirrups, and the reigns.&lt;br&gt;
UX is the feeling you get being able to ride the horse, and rope your cattle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dain Miller talks about the differences of UI and UX and how they often get confused. I think he provides some great definitions and good food for thought for any small company.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Software Made By Hand</title>
   <link href="http://www.ryanjm.com/2012/05/07/Software-made-by-hand/"/>
   <updated>2012-05-07T00:00:00-06:00</updated>
   <id>http://www.ryanjm.com/2012/05/07/Software-made-by-hand</id>
   <content type="html">&lt;p&gt;Scott Porad writes about why software is hard:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;First, name one other thing in the world, he said, that is used by so many people and which is created entirely by hand?  Stuff that is made by hand is hard to make, and even more hard to make well, and tends to be less sturdy than things made by machines.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Open For Business</title>
   <link href="http://www.ryanjm.com/2012/05/07/Open-for-business/"/>
   <updated>2012-05-07T00:00:00-06:00</updated>
   <id>http://www.ryanjm.com/2012/05/07/Open-for-business</id>
   <content type="html">&lt;p&gt;Last week was the end of my position at &lt;a href=&quot;http://nesloncash.com&quot;&gt;Nelson Cash&lt;/a&gt;. After working with the team there for a year, I was able to see them grow from 4 people meeting up in coffee shops, to 10 people moving into a new studio with custom desks. It was a privilege working with some of the best designers in the city.&lt;/p&gt;

&lt;p&gt;I received great experience working with project managers, designers, and clients in how to (and not to) run projects. Consulting is a continual learning process and Nelson Cash provided me with the best education I could ask for.&lt;/p&gt;

&lt;p&gt;For now I&amp;#39;m still in Chicago. I&amp;#39;m looking forward to networking with startups and consulting for them on iOS and Ruby on Rails projects. Chicago might not be the first city you think of when considering startups, but there is a great community here and I&amp;#39;m excited at the opportunities to help where I can.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re looking for a developer, please reach out: &lt;a href=&quot;mailto:ryan@miyanhq.com&quot;&gt;ryan@miyanhq.com&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Listing Attributes</title>
   <link href="http://www.ryanjm.com/2012/04/14/listing-attributes/"/>
   <updated>2012-04-14T00:00:00-06:00</updated>
   <id>http://www.ryanjm.com/2012/04/14/listing-attributes</id>
   <content type="html">&lt;p&gt;This past week I was working on a Ruby on Rails project where I needed to list out a lot of attributes of an object. The difficult part came in the fact that I didn&amp;#39;t want to display the attribute if it wasn&amp;#39;t set or was 0.&lt;/p&gt;

&lt;p&gt;Originally I had:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;erb codehilite&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_attribute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_attribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blank?&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &amp;lt;li&amp;gt;  &lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;strong&amp;gt;Attribute Label&amp;lt;/strong&amp;gt;  &lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_attribute&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &amp;lt;/li&amp;gt;  &lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When you start talking about 25 or 30 attributes you are printing out, some of which are nested, this gets to be a really ugly view. &lt;/p&gt;

&lt;p&gt;The next step was to move this to a helper method.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;erb codehilite&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%#&lt;/span&gt;&lt;span class=&quot;c&quot;&gt; in the view &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Attribute Label&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby codehilite&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# view helper&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;content_tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is better, but gets messy when I needed to change the formatting on some attributes and other attributes needed to be printed in a different format (percentages, dollar values, etc).&lt;/p&gt;

&lt;p&gt;I wanted the solution to be as easy as defining hash of attributes and titles. They way I could just grab my attributes:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby codehilite&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# view helper&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;my_attribute&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Attribute Label&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;nested_object.another_attribute_string&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Another Attribute&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In order to define the additional information I created some &lt;code&gt;_string&lt;/code&gt; methods which would return the right format or nil (which would get ignored later). For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby codehilite&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;another_attribute_string&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another_attribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blank?&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;another_attribute&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ft.&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I wanted to be able to control the way they got printed in the view since it changed depending on which view I was in. My goal was to be able to write the following.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;erb codehilite&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_attributes_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@listing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes_for_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@listing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &amp;lt;li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Thus the method needed to return a hash which had the correct label (key) and value (value).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby codehilite&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;attributes_for_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# This first inject will return the hash we want, with the value&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# of the label as the key and the attribute as the value&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attribute_pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# In order to do this, we first need to get the attribute.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# We do the split in order to get nested objects. But we are&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# always starting with our root object, `obj`.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute_pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Skip this value if it is nil&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil?&lt;/span&gt; 
      &lt;span class=&quot;c1&quot;&gt;# Strings we want to keep as is&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blank?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attribute_pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# For us, most of our numbers where dollar values. &lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# So rather than creating a custom `_string` method for each, &lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# it was easier to handle the case where the number &lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# shouldnt&amp;#39; be a dollar value.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attribute_pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_to_currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# return the hash to continue building&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A couple injects later I have a clean function that does exactly what I wanted.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jquery Development</title>
   <link href="http://www.ryanjm.com/2012/03/07/jQuery-development/"/>
   <updated>2012-03-07T00:00:00-07:00</updated>
   <id>http://www.ryanjm.com/2012/03/07/jQuery-development</id>
   <content type="html">&lt;p&gt;My mindset on how to use and develop in jQuery has just changed dramatically. I watched Yehuda Katz&amp;#39;s video on &lt;a href=&quot;http://jquery14.com/day-11&quot;&gt;Evented Programming&lt;/a&gt;. Basically the idea he presents boils down to asking:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If this was natively supported, what would it look like?&lt;/li&gt;
&lt;li&gt;Then writing the code to get the functionality you want, based on that.&lt;/li&gt;
&lt;li&gt;Then write the code to implement the &amp;quot;browser code&amp;quot;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Amazing. This creates very reusable code and simplifies the code you do write.&lt;/p&gt;

&lt;p&gt;I came across this video from Dan Webb&amp;#39;s article on &lt;a href=&quot;http://danwebb.net/2010/1/27/put-that-data-attribute-away-son-you-might-hurt-someone&quot;&gt;data-* attributes&lt;/a&gt;. It is also a great article and helps remember that we should try to keep the html as semantic as possible.&lt;/p&gt;

&lt;p&gt;Great resources to checkout.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Frameworks</title>
   <link href="http://www.ryanjm.com/2012/03/03/frameworks/"/>
   <updated>2012-03-03T00:00:00-07:00</updated>
   <id>http://www.ryanjm.com/2012/03/03/frameworks</id>
   <content type="html">&lt;p&gt;I don&amp;#39;t have much to add to this discussion right now, but I just wanting to point out that the next two years is going to be pretty exciting for the web development community. I think some great frameworks and design patterns will be built around CSS, JS, and API&amp;#39;s. We already have some great frameworks for the server side, so extending that to client side will fill out the stack.&lt;/p&gt;

&lt;p&gt;I think this will be a huge undercurrent in the ability for more applications to be moved to the web.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Technology In Classrooms</title>
   <link href="http://www.ryanjm.com/2012/01/25/technology-in-classrooms/"/>
   <updated>2012-01-25T00:00:00-07:00</updated>
   <id>http://www.ryanjm.com/2012/01/25/technology-in-classrooms</id>
   <content type="html">&lt;p&gt;Cringely gets at a good point about student motivation and it&amp;#39;s impact on learning. He is quoting a reader:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;...I&amp;#39;m finding that the real key to student success is not so much how you teach but how you go about motivating students to want to learn...&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This plays a huge impact in the university where many professors are there for the research and not the students.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But not every school can be a Stanford and even there, as at many research universities, much of the faculty doesn&amp;#39;t really want to teach.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a good reminder for myself to cultivate the motivation to learn as much as scheduling time to learn.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Producing Good Work</title>
   <link href="http://www.ryanjm.com/2012/01/24/producing-good-work/"/>
   <updated>2012-01-24T00:00:00-07:00</updated>
   <id>http://www.ryanjm.com/2012/01/24/producing-good-work</id>
   <content type="html">&lt;p&gt;From an article about David Oglivy and his habits as a copywriter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;2. I spend a long time studying the precedents. I look at every advertisement which has appeared for competing products during the past 20 years. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In development I know it is important to plan, but this puts a whole new view on it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;5. Before actually writing the copy, I write down ever concievable fact and selling idea. Then I get them organized and relate them to research and the copy platform. &lt;/p&gt;

&lt;p&gt;&amp;nbsp;12. I am a lousy copywriter, but I am a good editor. So I go to work editing my own draft. After four or five editings, it looks good enough to show to the client. If the client changes the copy, I get angry-because I took a lot of trouble writing it, and what I wrote I wrote on purpose.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>New Site</title>
   <link href="http://www.ryanjm.com/2012/01/21/new-site/"/>
   <updated>2012-01-21T00:00:00-07:00</updated>
   <id>http://www.ryanjm.com/2012/01/21/new-site</id>
   <content type="html">&lt;p&gt;I&amp;#39;m working on this site. Been meaning to get back into writing for awhile. So we&amp;#39;ll see how this goes. More to come.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
